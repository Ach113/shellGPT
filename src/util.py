import os
from datetime import datetime
from typing import Tuple, Optional


from config import ENV_VAR_NAME


def process_redirect(prompt: str) -> Tuple[str, str, str]:
    """
    :param prompt: prompt generated by the user including the redirect operator & filename
    :return prompt: query part of the prompt after removing file name
    :return file_path: path to redirect the model output
    :return mode: redirect mode. `a+` for append (`>>`), `w+` for write (`>`)

    separates lhs (user prompt) from rhs (file path to redirect models output)
    """

    if '>>' in prompt:
        prompt, file_path = prompt.split('>>')
        mode = 'a+'
    else:
        prompt, file_path = prompt.split('>')
        mode = 'w+'

    return prompt.strip(' '), file_path.strip(' '), mode


def log_conv(prompt: str, response: str, log: bool,
             redirect_file_path: Optional[str] = '', mode: Optional[str] = ''):
    """
    :param prompt: prompt asked by the user
    :param response: response generated by the language model
    :param log: indicates if `-l` parameter is enabled
    :param redirect_file_path: parameter which is specified during `>` or `>>` command from the user
    :param mode: 'w' for `>`, `a` for `>>`

    Logs the conversation between user and the model. Save path is specified in `config.py`
    """

    # if file spath is specified just log the current prompt/response
    if redirect_file_path:
        with open(redirect_file_path, mode) as fp:
            fp.write(f'$ {prompt}\n{response}\n')

    if log:
        date_str = datetime.today().strftime('%Y-%m-%d %H-%M-%S')
        # check if environment variable is set
        if ENV_VAR_NAME in os.environ:
            file_path = os.environ[ENV_VAR_NAME]
            with open(file_path, 'a+') as fp:
                fp.write(f'$ {prompt}\n{response}\n')
        else:
            # if not set a new one and call logging function anew
            os.environ[ENV_VAR_NAME] = os.path.join('..', 'logs', fr'log_{date_str}.txt')
            log_conv(prompt, response, log)


def clean():
    """
    unsets the environment variable used for logging
    """
    if ENV_VAR_NAME in os.environ:
        del os.environ[ENV_VAR_NAME]
